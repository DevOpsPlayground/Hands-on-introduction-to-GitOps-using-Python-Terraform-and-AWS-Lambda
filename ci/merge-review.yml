# Run a Terraform plan for this environment and output the plan to the merge reques
merge:plan-infra:
  stage: merge-request
  variables:
    PLAN: plan.cache
    PLAN_JSON: plan.json
  image:
    name: hashicorp/terraform:0.13.3
    entrypoint: [""]
  before_script:
    - apk --no-cache add jq
    - alias convert_report="jq -r '([.resource_changes[]?.change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
  only:
    - merge_requests
  script:
    # master branch is mapped to prod, so map these else use original values
    - BRANCH_NAME=$([ "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" == "master" ] && echo "prod" || echo "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME")
    - cd infra
    # Initialise Terraform and set up Workspace
    - terraform init -backend-config="key=gitops_${USER_NAME}.tfstate"
    - (terraform workspace select ${BRANCH_NAME} || terraform workspace new ${BRANCH_NAME})
    # Run Plan and store output
    - terraform plan -var="environment=${BRANCH_NAME}" -var="username=${USER_NAME}" -out=$PLAN
    - terraform show --json $PLAN | convert_report > $PLAN_JSON
  tags:
    - docker
  artifacts:
    reports:
      terraform: infra/$PLAN_JSON

# Run the TFLint tool to analyse our code. Send test results to the merge request
merge:lint-terraform:
  stage: merge-request
  image:
    name: wata727/tflint
    entrypoint: [""]
  only:
    - merge_requests
  script:
    - cd infra
    - tflint -f junit > ../tflint.xml
  tags:
    - docker
  artifacts:
    when: always
    reports:
      junit: tflint.xml
